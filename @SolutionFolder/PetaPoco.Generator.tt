<#
// *** カスタマイズしたT4Template ***

if (string.IsNullOrEmpty(Namespace)) Namespace=DatabaseName;
if (string.IsNullOrEmpty(RepoName)) RepoName="DB";

#>
using System;
using PetaPoco;

namespace <#=Namespace #>
{
<# if (GenerateCommon) { //**[A]** #>
    /// <summary>
    /// <#=DatabaseName#> 接続文字列
    /// </summary>
    public static class Config
    {
        /// <summary>デフォルトの接続文字列</summary>
        public static string ConnectionString { get; set; }
    }

    /// <summary>
    /// <#=DatabaseName#> Database Object
    /// </summary>
    public class <#=RepoName#> : DatabaseExtension
    {
        /// <summary>
        /// <#=DatabaseName#> Database Object
        /// </summary>
        public <#=RepoName#>() : base(Config.ConnectionString, "<#=ProviderName#>")
        {
        }
<# if (GenerateOperations) { //**[B]** #>
        
        public interface IFactory
        {
            <#=RepoName#> GetInstance();
        }
        
        public static IFactory Factory { get; set; }
        public static <#=RepoName#> GetInstance()
        {
            if (_instance!=null)
                return _instance;
                
            if (Factory!=null)
                return Factory.GetInstance();
            else
                return new <#=RepoName#>();
        }

        [ThreadStatic] static <#=RepoName#> _instance;
        
        public override void OnBeginTransaction()
        {
            if (_instance==null)
                _instance=this;
        }
        
        public override void OnEndTransaction()
        {
            if (_instance==this)
                _instance=null;
        }
        
        public class Record<T> where T:new()
        {
            public static <#=RepoName#> repo { get { return <#=RepoName#>.GetInstance(); } }
            public bool IsNew() { return repo.IsNew(this); }
            public object Insert() { return repo.Insert(this); }
<# if (!TrackModifiedColumns) { //**[C]** #>
            public void Save() { repo.Save(this); }
            public int Update() { return repo.Update(this); }
<# } //**[C]** #>
            public int Update(IEnumerable<string> columns) { return repo.Update(this, columns); }
            public static int Update(string sql, params object[] args) { return repo.Update<T>(sql, args); }
            public static int Update(Sql sql) { return repo.Update<T>(sql); }
            public int Delete() { return repo.Delete(this); }
            public static int Delete(string sql, params object[] args) { return repo.Delete<T>(sql, args); }
            public static int Delete(Sql sql) { return repo.Delete<T>(sql); }
            public static int Delete(object primaryKey) { return repo.Delete<T>(primaryKey); }
            public static bool Exists(object primaryKey) { return repo.Exists<T>(primaryKey); }
            public static T SingleOrDefaultById(object primaryKey) { return repo.SingleOrDefaultById<T>(primaryKey); }
            public static T SingleOrDefault(string sql, params object[] args) { return repo.SingleOrDefault<T>(sql, args); }
            public static T SingleOrDefault(Sql sql) { return repo.SingleOrDefault<T>(sql); }
            public static T FirstOrDefault(string sql, params object[] args) { return repo.FirstOrDefault<T>(sql, args); }
            public static T FirstOrDefault(Sql sql) { return repo.FirstOrDefault<T>(sql); }
            public static T SingleById(object primaryKey) { return repo.SingleById<T>(primaryKey); }
            public static T Single(string sql, params object[] args) { return repo.Single<T>(sql, args); }
            public static T Single(Sql sql) { return repo.Single<T>(sql); }
            public static T First(string sql, params object[] args) { return repo.First<T>(sql, args); }
            public static T First(Sql sql) { return repo.First<T>(sql); }
            public static List<T> Fetch(string sql, params object[] args) { return repo.Fetch<T>(sql, args); }
            public static List<T> Fetch(Sql sql) { return repo.Fetch<T>(sql); }
            public static List<T> Fetch(long page, long itemsPerPage, string sql, params object[] args) { return repo.Fetch<T>(page, itemsPerPage, sql, args); }
            public static List<T> Fetch(long page, long itemsPerPage, Sql sql) { return repo.Fetch<T>(page, itemsPerPage, sql); }
            public static List<T> SkipTake(long skip, long take, string sql, params object[] args) { return repo.SkipTake<T>(skip, take, sql, args); }
            public static List<T> SkipTake(long skip, long take, Sql sql) { return repo.SkipTake<T>(skip, take, sql); }
            public static Page<T> Page(long page, long itemsPerPage, string sql, params object[] args) { return repo.Page<T>(page, itemsPerPage, sql, args); }
            public static Page<T> Page(long page, long itemsPerPage, Sql sql) { return repo.Page<T>(page, itemsPerPage, sql); }
            public static IEnumerable<T> Query(string sql, params object[] args) { return repo.Query<T>(sql, args); }
            public static IEnumerable<T> Query(Sql sql) { return repo.Query<T>(sql); }
<# if (TrackModifiedColumns) { //**[D]** #>
            private Dictionary<string,bool> ModifiedColumns;
            private void OnLoaded()
            {
                ModifiedColumns = new Dictionary<string,bool>();
            }
            protected void MarkColumnModified(string column_name)
            {
                if (ModifiedColumns!=null)
                    ModifiedColumns[column_name]=true;
            }
            public int Update()
            {
                if (ModifiedColumns==null)
                    return repo.Update(this);

                int retv = repo.Update(this, ModifiedColumns.Keys);
                ModifiedColumns.Clear();
                return retv;
            }
            public void Save()
            {
                if (repo.IsNew(this))
                    repo.Insert(this);
                else
                    Update();
            }
<# } //**[D]** #>
        }
<# } //**[B]** #>
    }
<# } //**[A]** #>

<# if (GeneratePocos) { //**[E]** #>
<#
foreach(Table tbl in from t in tables where !t.Ignore orderby t.Name ascending select t)
{ //**[F]**
#>

    /// <summary><#=tbl.Comment#></summary>
    [TableName("<#=tbl.Name#>")]
<# if (tbl.PK!=null && (tbl.PK.Count > 1 ? false : (tbl.PK.Count == 1 ? tbl.PK[0].IsAutoIncrement : false))) { //**[G]** #>
<# if (tbl.SequenceName==null) { //**[H]** #>
    [PrimaryKey("<#=GetPrimaryKeys(tbl.PK)#>")]
<# } else { #>
    [PrimaryKey("<#=GetPrimaryKeys(tbl.PK)#>", sequenceName="<#=tbl.SequenceName#>")]
<# } //**[H]** #>
<# } //**[G]** #>
<# if (tbl.PK!=null && !(tbl.PK.Count > 1 ? false : (tbl.PK.Count == 1 ? tbl.PK[0].IsAutoIncrement : false))) { //**[I]** #>
    [PrimaryKey("<#=GetPrimaryKeys(tbl.PK)#>", AutoIncrement=false)]
<# } //**[I]** #>
    [ExplicitColumns]
    public class <#=tbl.ClassName#><# if (GenerateOperations) { #>: <#=RepoName#>.Record<<#=tbl.ClassName#>> <# } #><# if (!GenerateOperations && TrackModifiedColumns) { #>: PetaPoco.PetaPocoRecord<<#=tbl.ClassName#>> <# } #>
    {
<#
foreach(Column col in from c in tbl.Columns where !c.Ignore select c)
{ //**[J]**
#>
<# if (col.Comment != null) { //**[L]** #>
        /// <summary><#=col.Comment#></summary>
<# } //**[L]** #>
<# if (TrackModifiedColumns) { //**[K]** #>
        [<#=GetColumnAttribute(col)#>] public <#=col.PropertyType #><#=CheckNullable(col)#> <#=col.PropertyName #> { get { return _<#=col.PropertyName #>; } set { _<#=col.PropertyName #> = value; MarkColumnModified("<#=col.Name#>"); } } <#=col.PropertyType #><#=CheckNullable(col)#> _<#=col.PropertyName #>;
<# } else { #>
        [<#=GetColumnAttribute(col)#>] public <#=col.PropertyType #><#=CheckNullable(col)#> <#=col.PropertyName #> { get; set; }
<# } //**[K]** #>
<# } //**[J]** #>
    }
<# } //**[F]** #>
<# } //**[E]** #>
}
